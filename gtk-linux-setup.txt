‚úÖ If You Are Using Linux (e.g., Ubuntu/Debian-based):
GTK is very well supported on Linux, and installation is straightforward.
üîß Step-by-Step (Ubuntu/Debian):
    1. Update your package list:
       
       sudo apt update
    2. Install GTK 3 and development libraries:
       
       sudo apt install libgtk-3-dev
    3. Verify installation:
Check if gtk-3 is available using pkg-config:
       
       pkg-config --modversion gtk+-3.0
       You should see the version number, e.g., 3.24.38.


Step 4: Install VS Code and Extensions
Text:
    1. Download & install from https://code.visualstudio.com
    2. Install these extensions:
        ‚ó¶ C/C++ (by Microsoft)
        ‚ó¶ Code Runner (optional)
        ‚ó¶ CMake Tools (optional)


üéûÔ∏è Step 5: Create New GTK C File in VS Code
Text:
    ‚Ä¢ Create a folder, e.g. gtk-demo
    ‚Ä¢ Inside it, create a file main.c
    ‚Ä¢ Write your GTK code (same as earlier slide)
    ‚Ä¢ Save the file



Step 6: Enable IntelliSense in VS Code with GTK
Title: Why Configure IntelliSense in VS Code?
Content:
    ‚Ä¢ VS Code needs to know where GTK header files are.
    ‚Ä¢ Otherwise, you‚Äôll see red squiggly errors even if the code is fine.
    ‚Ä¢ This is done by configuring c_cpp_properties.json.

üéûÔ∏è Step 7: Where to Create This File?
Title: Steps to Add c_cpp_properties.json
Content:
    1. In VS Code, open your project folder.
    2. Go to .vscode folder (create if not present).
    3. Inside it, create a file named c_cpp_properties.json.


üéûÔ∏è Step 8: Windows Configuration for MSYS2 + GTK
Title: Sample Configuration for MSYS2 (UCRT64)
Content (code snippet):

{
  "configurations": [
    {
      "name": "Windows",
      "includePath": [
        "${workspaceFolder}/**",
        "C:/msys64/ucrt64/include/gtk-3.0",
        "C:/msys64/ucrt64/include/glib-2.0",
        "C:/msys64/ucrt64/lib/glib-2.0/include",
        "C:/msys64/ucrt64/include/pango-1.0",
        "C:/msys64/ucrt64/include/cairo",
        "C:/msys64/ucrt64/include/gdk-pixbuf-2.0",
        "C:/msys64/ucrt64/include/atk-1.0",
        "C:/msys64/ucrt64/include/harfbuzz",
        "C:/msys64/ucrt64/include/freetype2",
        "C:/msys64/ucrt64/include/libpng16"
      ],
      "compilerPath": "C:/msys64/ucrt64/bin/gcc.exe",
      "cStandard": "c11",
      "cppStandard": "c++17",
      "intelliSenseMode": "windows-gcc-x64"
    }
  ],
  "version": 4
}



Step 9: Write a Sample GTK C Program
Text (show code file name): main.c

#include <gtk/gtk.h>

int main(int argc, char *argv[]) {
    gtk_init(&argc, &argv);

    // Load the UI from Glade file
    GtkBuilder *builder = gtk_builder_new_from_file("main.ui");

    // Get window and widgets by ID
    GtkWidget *window = GTK_WIDGET(gtk_builder_get_object(builder, "main_window"));
    GtkWidget *button = GTK_WIDGET(gtk_builder_get_object(builder,"my_button"));

    // Connect signals
    g_signal_connect(window, "destroy", G_CALLBACK(gtk_main_quit), NULL);
    g_signal_connect(button, "clicked", G_CALLBACK(gtk_main_quit), NULL); // You can replace this with custom function

    gtk_widget_show_all(window);
    gtk_main();

    return 0;
}


üéûÔ∏è Step 10: Compile the GTK Program
Text:

gcc `pkg-config --cflags gtk+-3.0` main.c -o app `pkg-config --libs gtk+-3.0`

If successful, it creates app.exe.

üéûÔ∏è Slide 11: Run and See the Output
Text:

command: ./app
